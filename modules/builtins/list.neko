var list = $new(null);

list.contents = $amake(0);

$exports.__iter__ = function() 
{
    var i = -1;

    var iterator = $new(null);
    $objsetproto(iterator, list);
    
    iterator.__next__ = function()
    {
        i = i + 1;
        
        if (i >= $asize(this.contents))
        {
			// exception
		}
		else
		{
			return this.contents[i];
		}
	}
	
	return iterator;
}

$exports.__len__ = function() 
{
	return $asize(this.contents);
}

$exports.append = function(elem) 
{
	var copy_list = $amake(0);
	var i = 0;
	
	copy_list = $amake($asize(this.contents) + 1);
	
	while ( i < $asize(this.contents))
	{
		copy_list[i] = this.contents[i];
		i = i + 1;
	}
	
	copy_list[i] = elem;
	
	this.contents = $acopy(copy_list);
}


$exports.count = function(elem) 
{
	var i = 0;
	var total = 0;
	
	while (i < $asize(this.contents))
	{
		if (this.contents[i] == elem)
		{
			total = total + 1;
		}
        
        i = i + 1;
	}
	
	return total;
}


$exports.extend = function() 
{
    //TODO
}

$exports.index = function(x) 
{
	var i = 0;
	
	while (i < $asize(this.contents))
	{
		if (this.contents[i] == x)
		{
			return i;
		}
		
		i = i + 1;
	}
	
	return null;
}


$exports.insert = function(i, x) 
{
	var index = 0;
	
	if (i < 0 || i > $asize(this.contents))
	{
		return null;
	}
	
	while (index <= $asize(this.contents))
	{
		if (i == index)
		{
			this.contents[i] = x;
		}
		
		index = index + 1;
	}
}


$exports.pop = function() 
{
	var retval;
	var tmp_list;
	
	// check boundaries
	
	retval = this.contents[$asize(this.contents)-1];
	
	tmp_list = $asub(this.contents, 0, $asize(this.contents)-1);
	
	this.contents = tmp_list;
	
	return retval;
}


$exports.remove = function(x) 
{
	var tmp_list = $amake($asize(this.contents)-1);
	
	var i = 0;
	var j = 0;

	while (i <= $asize(this.contents))
	{
		if (this.contents[i] != x)
		{
			tmp_list[j] = this.contents[i];
			j = j + 1;
		}
		
		i = i + 1;
	}
	
	this.contents = tmp_list;
}


$exports.reverse = function(list) 
{
	//TODO
}


$exports.sort = function() 
{
	//TODO
}
