var list = $new(null);

var list_create = function()
{
    var o = $new(null);

    o.contents = $amake(0);
    o.type = 10;

    $objsetproto(o, list);

    return o;
}

list.__add__ = function(param_list)
{
    o = list_create();

    o.contents = $aconcat($array(this.contents, param_list.contents));
    
    return o;
}


list.__contains__ = function(item)
{
    var size = $asize(this.contents);
    var i = 0;
    
    while ( i < size )
    {
	if ( item.type == 11 || item.type == 12 )
	{
	    if ( this.contents[i].numerator == item.numerator )
	    {
		return true;
	    }
        }

        i = i + 1;
    }

    return false;
}


list.__delitem__ = function(index)
{
    var array_size = $asize(this.contents);
    var i = 0;
    var j = 0;

    var tmp_array = $amake($asize(this.contents) - 1);

    while ( i < array_size )
    {
        if ( i != index )
        {
            tmp_array[j] = this.contents[i];
            j = j + 1;
        }

        i = i + 1;
    }
    
    this.contents = tmp_array;
}


list.__eq__ = function(param_list)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_list.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return false;
    }
	
    while ( i < first_array_size )
    {
        if ( $hash($string(this.contents[i])) !=  $hash($string(param_list.contents[i])))
        {
            return false;
        }

        i = i + 1;
    }

    return true;
}


list.__ge__ = function()
{
    // TODO
}


list.__getattribute__ = function()
{
    // TODO
}


list.__getitem__ = function(index)
{
    return this.contents[index.numerator];
}


list.__gt__ = function()
{
    // TODO
}


list.__iadd__ = function()
{
    // TODO
}


list.__imul__ = function()
{
    // TODO
}


list.__init__ = function()
{
    // TODO
}


list.__iter__ = function()
{
    var i = -1;

    var iterator = $new(null);
    iterator.contents = this.contents;

    iterator.__next__ = function()
    {
        i = i + 1;

        if (i >= $asize(this.contents))
        {
            ; // exception
        }
        else
        {
            return this.contents[i];
        }
    }

    return iterator;
}


list.__le__ = function()
{
    // TODO
}


list.__len__ = function()
{
    return $asize(this.contents);
}


list.__lt__ = function()
{
    // TODO
}


list.__mul__ = function()
{
    // TODO
}


list.__ne__ = function(param_list)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_list.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return true;
    }

    while ( i < first_array_size )
    {
        if ( this.contents[i] !=  param_list[i])
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__repr__ = function()
{
    // TODO
}


list.__reversed__ = function()
{
    // TODO
}


list.__rmul__ = function()
{
    // TODO
}


list.__setitem__ = function(index, value)
{
    this.contents[index] = value;
}


list.__sizeof__ = function()
{
    // TODO
}


list.append = function(item)
{
    var copy_list = $amake(0);
    var i = 0;

    copy_list = $amake($asize(this.contents) + 1);

    while ( i < $asize(this.contents))
    {
        copy_list[i] = this.contents[i];
        i = i + 1;
    }

    copy_list[i] = item;

    this.contents = $acopy(copy_list);
}


list.count = function(item)
{
    var i = 0;
    var total = 0;

    while (i < $asize(this.contents))
    {
        if (this.contents[i] == item)
        {
            total = total + 1;
        }

        i = i + 1;
    }

    return total;
}


list.extend = function()
{
    //TODO
}

list.index = function(item)
{
    var i = 0;

    while (i < $asize(this.contents))
    {
        if (this.contents[i] == item)
        {
            return i;
        }

        i = i + 1;
    }

    return null;
}


list.insert = function(i, item)
{
    var index = 0;

    if (i < 0 || i > $asize(this.contents))
    {
        return null;
    }

    while (index <= $asize(this.contents))
    {
        if (i == index)
        {
            this.contents[i] = item;
        }

        index = index + 1;
    }
}


list.pop = function()
{
    var retval;
    var tmp_list;

    // check boundaries

    retval = this.contents[$asize(this.contents)-1];

    tmp_list = $asub(this.contents, 0, $asize(this.contents)-1);

    this.contents = tmp_list;

    return retval;
}


list.remove = function(item)
{
    var tmp_list = $amake($asize(this.contents)-1);

    var i = 0;
    var j = 0;

    while (i <= $asize(this.contents))
    {
        if (this.contents[i] != item)
        {
            tmp_list[j] = this.contents[i];
            j = j + 1;
        }

        i = i + 1;
    }

    this.contents = tmp_list;
}


list.reverse = function(list)
{
    //TODO
}


list.sort = function()
{
    //TODO
}


$exports.list = list;
