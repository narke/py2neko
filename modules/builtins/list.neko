var functions   = $loader.loadmodule("functions",$loader);

var list = $new(null);

var list_create = function()
{
    var o = $new(null);

    o.contents = $amake(0);
    o.type = 10;

    $objsetproto(o, list);

    return o;
}

list.__add__ = function(param_list)
{
    o = list_create();

    o.contents = $aconcat($array(this.contents, param_list.contents));
    
    return o;
}


list.__contains__ = function(item)
{
    var size = $asize(this.contents);
    var i = 0;
    
    while ( i < size )
    {
	if ( item.type == 11 || item.type == 12 )
	{
	    if ( this.contents[i].numerator == item.numerator )
	    {
		return true;
	    }
        }

        i = i + 1;
    }

    return false;
}


list.__delitem__ = function(index)
{
    var array_size = $asize(this.contents);
    var i = 0;
    var j = 0;

    var tmp_array = $amake($asize(this.contents) - 1);

    while ( i < array_size )
    {
        if ( i != index )
        {
            tmp_array[j] = this.contents[i];
            j = j + 1;
        }

        i = i + 1;
    }
    
    this.contents = tmp_array;
}


list.__eq__ = function(param_list)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_list.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return false;
    }
	
    while ( i < first_array_size )
    {
        if ( $hash($string(this.contents[i])) !=  $hash($string(param_list.contents[i])) )
        {
            return false;
        }

        i = i + 1;
    }

    return true;
}


list.__ge__ = function(param_list)
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] >= param_list.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__getattribute__ = function()
{
    // TODO
}


list.__getitem__ = function(index)
{
    return this.contents[index.numerator];
}


list.__gt__ = function(param_list)
{
	var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] > param_list.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__iadd__ = function()
{
	o = list_create();

    o.contents = $aconcat($array(this.contents, param_list.contents));
    
    return o;
}


list.__imul__ = function(n)
{
    o = list_create();
    var i = 0;
    var j = 0;
    
    var array_size = $asize(this.contents);
    var tmp_array = $amake($asize(this.contents) * n.numerator);
    var level = 0;
    
    while ( i < n.numerator )
    {
	while ( j < array_size)
	{
	    tmp_array[level+j] = this.contents[j];

	    j = j + 1;
	}
	level = level + array_size;
	j = 0;
		
	i = i + 1;
    }
    
    o.contents = tmp_array;
    return o;
}


list.__init__ = function()
{
    // TODO
}


list.__iter__ = function()
{
    var i = -1;

    var iterator = $new(null);
    iterator.contents = this.contents;

    iterator.__next__ = function()
    {
        i = i + 1;

        if (i >= $asize(this.contents))
        {
            ; // exception
        }
        else
        {
            return this.contents[i];
        }
    }

    return iterator;
}


list.__le__ = function()
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] <= param_list.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__len__ = function()
{
    o = functions.int(0);
	
    o.numerator =  $asize(this.contents);
    
    return o;
}


list.__lt__ = function()
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] < param_list.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__mul__ = function(n)
{
    o = list_create();
    var i = 0;
    var j = 0;
    
    var array_size = $asize(this.contents);
    var tmp_array = $amake($asize(this.contents) * n.numerator);
    var level = 0;
    
    while ( i < n.numerator )
    {
	while ( j < array_size)
	{
	    tmp_array[level+j] = this.contents[j];
	    j = j + 1;
	}
	level = level + array_size;
	j = 0;
		
	i = i + 1;
    }
    
    o.contents = tmp_array;
    return o;
}


list.__ne__ = function(param_list)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_list.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return true;
    }
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] != param_list.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


list.__repr__ = function()
{
    // TODO
}


list.__reversed__ = function()
{
    var index = 0;
    var array_size = $asize(this.contents);
	
    var iterator = $new(null);
    iterator.contents = $amake(array_size);
    iterator.type = 10;
    
    // reverse the array
    while (index < array_size)
    {
	iterator.contents[index] = this.contents[array_size - index - 1];
	index = index + 1;
    }
    
    iterator.__len__ = function()
    {
	return $asize(this.contents);
    }

    var i = -1;
	
    iterator.__iter__ = function()
    {
    	iterator.__next__ = function()
    	{
            i = i + 1;

            if (i >= $asize(this.contents))
            {
                ; // exception
            }
            else
            {
                return this.contents[i];
            }
    	}	

    	return iterator;
    }
    
    iterator.__next__ = function()
    {
        i = i + 1;

        if (i >= $asize(this.contents))
        {
            ; // exception
        }
        else
        {
            return this.contents[i];
        }
     }

    return iterator;
}


list.__rmul__ = function(n)
{
    o = list_create();
    var i = 0;
    var j = 0;
    
    var array_size = $asize(this.contents);
    var tmp_array = $amake($asize(this.contents) * n.numerator);
    var level = 0;
    
    while ( i < n.numerator )
    {
	while ( j < array_size)
	{
	    tmp_array[level+j] = this.contents[j];
	    j = j + 1;
	}
	level = level + array_size;
	j = 0;
		
	i = i + 1;
    }
    
    o.contents = tmp_array;
    return o;
}


list.__setitem__ = function(index, value)
{
    this.contents[index] = value;
}


list.__sizeof__ = function()
{
    // TODO
}


list.append = function(item)
{
    var copy_list = $amake(0);
    var i = 0;

    copy_list = $amake($asize(this.contents) + 1);

    while (i < $asize(this.contents))
    {
        copy_list[i] = this.contents[i];
        i = i + 1;
    }

    copy_list[i] = item;

    this.contents = $acopy(copy_list);
}


list.count = function(item)
{
    var i = 0;
    var total = 0;

    while (i < $asize(this.contents))
    {
        if ($hash($string(this.contents[i])) ==  $hash($string(item)))
        {
            total = total + 1;
        }

        i = i + 1;
    }

    o = functions.int(0);
    o.numerator = total;
    return o;
}


list.extend = function()
{
    //TODO
}

list.index = function(item)
{
    var i = 0;

    while (i < $asize(this.contents))
    {
        if ($hash($string(this.contents[i])) ==  $hash($string(item)))
        {
	    o = functions.int(0);
	    o.numerator = i
	    return o;
        }

        i = i + 1;
    }

    return null;
}


list.insert = function(i, item)
{
    var index = 0;

    if (i < 0 || i > $asize(this.contents))
    {
        return null;
    }

    while (index <= $asize(this.contents))
    {
        if (i.numerator == index)
        {
            this.contents[i.numerator] = item;
        }

        index = index + 1;
    }
}


list.pop = $varargs(function(args)
{
    var nb_args = $asize(args);
    var index = 0;
	
    var retval;
    var tmp_list;
	
    if (nb_args == 0)
    {
	// pop the last item
		
	retval = this.contents[$asize(this.contents)-1];

	tmp_list = $asub(this.contents, 0, $asize(this.contents)-1);

	this.contents = tmp_list;

	return retval;
    }
    {
	index = args[0];
	// TODO
    }
});


list.remove = function(item)
{
    var tmp_list = $amake($asize(this.contents)-1);

    var i = 0;
    var j = 0;

    while (i <= $asize(this.contents))
    {
        if ($hash($string(this.contents[i])) !=  $hash($string(item)))
        {
            tmp_list[j] = this.contents[i];
            j = j + 1;
        }

        i = i + 1;
    }

    this.contents = tmp_list;
}


list.reverse = function()
{
	var i = 0;
    var array_size = $asize(this.contents);
	
    var tmp_array = $amake(array_size);

    
    // reverse the array
    while (i < array_size)
    {
	tmp_array[i] = this.contents[array_size - i - 1];
	i = i + 1;
    }
    
    this.contents = tmp_array;
}


list.sort = function()
{
    //TODO
}


$exports.list = list;
