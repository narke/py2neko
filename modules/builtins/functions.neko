var type_list = $loader.loadmodule("list",$loader);
var type_int  = $loader.loadmodule("int",$loader);

var abs = function(n)
{
    return n.__abs__();
}


var all = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while (i < $asize(iterable))
    {
        if (bool(iterable[i]) == false)
        {
            return false;
        }
        i = i + 1;
    }

    return true;
}


var any = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while (i < $asize(iterable))
    {
        if (bool(iterable[i]) == true)
        {
            return true;
        }
        i = i + 1;
    }

    return false;
}


var bool = function(n)
{
    if (n != 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}


var callable = function(object)
{
    if (object == $tfunction)
    {
        return true;
    }
    else
    {
        return false;
    }
}


var divmod = function(x, y)
{
	x.__divmod__(y)
}


var enumerate = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while(i < $asize(iterable))
    {
        return tuple(i, iterable[i]);
    }
}


var int = function(n)
{
    var o = $new(null);

    o.numerator   = n;
    o.denominator = 1;
    o.imag        = 1;
    o.real        = 1;
    o.type        = 11;

    $objsetproto(o, type_int.int);
    
    return o;
}


var iter = function(iterable)
{
    if (iterable.type == 10)
    {
        return iterable.__iter__();
    }
}


var float = function(n)
{
    if ($typeof(n) == $tint
        || $typeof(n) == $tfloat
        || $typeof(n) == $tbool
        || $typeof(n) == $tstring)
    {
        try
            return $float(n)
        catch e
        {
            $print(e);
        }
    }
}

var len = function(object)
{
    return object.__len__();
}

var list = function(iterable)
{
    if ($typeof(iterable) == $tarray)
    {
        var o = $new(null);

        // This is a tuple disguised as a list
        o.contents = iterable;
        o.type = 10;

        $objsetproto(o, type_list.list);
        return o;
    }
}


var max = function(a, b)
{
    if (a >= b)
    {
        return a;
    }
    else
    {
        return b;
    }
}


var min = function(a, b)
{
    if (a <= b)
    {
        return a;
    }
    else
    {
        return b;
    }
}


var pow = function(x, y, z)
{
	x.__pow__(y);
}


var print = $varargs(function(args)
{
	var nb_args = $asize(args);
	var i = 0;
	
	while ( i < nb_args )
	{
		if ( args[i].type == 11 )
		{
			$print(args[i].numerator);
		}
		i = i + 1;
	}
	
	$print("\n");
});


var range = function(start, stop, step)
{
    if (stop <= 0)
    {
        return $amake(0);
    }

    // only stop is provided
    if (start == 0 && step == 0)
    {
        var i = 0;
        var a = $amake(stop - 1);

        while ( i < stop)
        {
            a[i] = i;
            i = i + 1;
        }

        return a;
    } // all parameters are provided
    else if (start != 0 && stop > 0 && step != 0)
    {
        if (start >= stop)
        {
            return $amake(0);
        }

        else if (step >= stop)
        {
            return start;
        }
        else
        {
            var i = 0;
            var a = $amake(stop / step);

            while ( start < stop)
            {
                a[i] = start;
                start = start + step;
                i = i + 1;
            }

            return a;
        }
    }
}


var sum = function(list)
{
    var length = $asize(list);
    var i = 0;
    var sum = 0;

    while (i < length)
    {
        sum = sum + list[i];
    }

    return sum;
}


$exports.abs        = abs;
$exports.all        = all;
$exports.any        = any;
$exports.bool       = bool;
$exports.callable   = callable;
$exports.divmod     = divmod;
$exports.enumerate  = enumerate;
$exports.float      = float;
$exports.int        = int;
$exports.iter       = iter;
$exports.len        = len;
$exports.list       = list;
$exports.max        = max;
$exports.min        = min;
$exports.pow        = pow;
$exports.print      = print;
$exports.range      = range;
$exports.sum        = sum;
