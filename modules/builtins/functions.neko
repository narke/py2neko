
var abs = function(n) 
{
	if (n < 0)
	{
		return 0 - n;
	}
	return n;
}


var all = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while (i < $asize(iterable))
    {
        if (bool(iterable[i]) == false)
        {
            return false;
        }
    }

    return true;
}


var any = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while (i < $asize(iterable))
    {
        if (bool(iterable[i]) == true)
        {
            return true;
        }
    }

    return false;
}


var bool = function(n) 
{
	if (n != 0)
	{
		return true;
	}
	else
	{
		return false;
	}
}


var callable = function(object)
{
    if (object == $tfunction)
    {
        return true;
    }
    else
    {
        return false;
    }
}


var divmod = function(x, y)
{
    if ($typeof(x) == $tint && $typeof(y) == $tint)
    {
        return $array($idiv(x - x % y, y), x % y);
    }
    else if ($typeof(x) == $tfloat || $typeof(y) == $tfloat)
    {
        return $array((x - x % y)/y, x % y);
    }
    else
    {
        throw("TypeError: an integer is required");
    }
}


var enumerate = function(iterable)
{
    if (($typeof(iterable) != $tarray))
    {
        throw("TypeError: an iterable is required");
    }

    var i = 0;

    while(i < $asize(iterable))
    {
        return tuple(i, iterable[i]);
    }    
}


var int = function(n) 
{
	if ($typeof(n) == $tint 
		|| $typeof(n) == $tfloat 
		|| $typeof(n) == $tbool
		|| $typeof(n) == $tstring)
	{
		try
			return $int(n)
		catch e 
		{
			$print(e);
		}
	}
}


var iter = function(iterable)
{
	return iterable.__iter__();
}


var float = function(n) 
{
	if ($typeof(n) == $tint 
		|| $typeof(n) == $tfloat 
		|| $typeof(n) == $tbool
		|| $typeof(n) == $tstring)
	{
		try
			return $float(n)
		catch e 
		{
			$print(e);
		}
	}
}

var len = function(object)
{
    if ($typeof(object) == $tstring)
    {
        return $ssize(object);
    }
    else if ($typeof(object) == $tchar)
    {
        return 1;
    }
    else if ($typeof(object) == $tarray)
    {
        return $asize(object);
    }
}

var list = function(parameter) 
{
	if ($typeof(parameter) == $tarray)
	{
		// This is a tuple
		return parameter;
	}
}


var max = function(a, b)
{
	if (a >= b)
	{
		return a;
	}
	else
	{
		return b;
	}
}


var min = function(a, b)
{
	if (a <= b)
	{
		return a;
	}
	else
	{
		return b;
	}
}


var pow = function(x, y, z)
{
    if (($typeof(x) != $tint && $typeof(x) != $tfloat)
        || ($typeof(y) != $tint && $typeof(y) != $tfloat)
        || ($typeof(z) != $tint && $typeof(z) != $tfloat))
    {
        throw("TypeError: an integer or float is required");
    }
    
    var i = 0;
    var result = x;

    while (i < y-1)
    {
        result = result * x;
        i = i + 1;
    }

    if (z != 0)
    {
        return result % z;
    }
    else
    {
        return result;
    }
}


var range = function(start, stop, step)
{
    if (stop <= 0)
    {
        return $amake(0);
    }

    // only stop is provided
    if (start == 0 && step == 0)
    {
        var i = 0;
        var a = $amake(stop - 1);

        while ( i < stop)
        {
            a[i] = i;
            i = i + 1;
        }

        return a;
    } // all parameters are provided
    else if (start != 0 && stop > 0 && step != 0)
    {
        if (start >= stop)
        {
            return $amake(0);
        }

        else if (step >= stop)
        {
            return start;
        }
        else
        {
            var i = 0;
            var a = $amake(stop / step);

            while ( start < stop)
            {
                a[i] = start;
                start = start + step;
                i = i + 1;
            }

            return a;
        }
    }
}


var sum = function(list)
{
	var length = $asize(list);
	var i = 0;
	var sum = 0;
	
	while (i < length)
    {
		sum = sum + list[i];
    }
    
    return sum;
}


$exports.abs      	= abs;
$exports.all      	= all;
$exports.any      	= any;
$exports.bool     	= bool;
$exports.callable 	= callable;
$exports.divmod   	= divmod;
$exports.enumerate	= enumerate;
$exports.float    	= float;
$exports.int      	= int;
$exports.iter      	= iter;
$exports.len	  	= len;
$exports.list	  	= list;
$exports.max      	= max;
$exports.min      	= min;
$exports.pow      	= pow;
$exports.range		= range;
$exports.sum      	= sum;
