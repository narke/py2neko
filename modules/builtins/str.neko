var functions   = $loader.loadmodule("functions",$loader);

var str = $new(null);

var str_create = function()
{
    var o = $new(null);

    o.contents = $smake(0);
    o.type = 15;

    $objsetproto(o, str);

    return o;
}


str.__add__ = function(s)
{
    o = str_create();
	
    o.contents = $smake($ssize(this.contents) + $ssize(s.contents));
    o.contents = this.contents + s.contents;
	
    return o;
}


str.__contains__ = function(substring)
{
    var str_size = $ssize(this.contents);
    var substr_size = $ssize(substring.contents);
    var i = 0;

    while (i + substr_size < str_size)
    {
	if (substring.contents == $ssub(this.contents, i, i + substr_size))
	{
	    return true;
	}

	i = i + 1;
    }
    
    return false;
}


str.__eq__ = function(string)
{
    if (this.contents == string.contents)
    {
	return true;
    }
    else
    {
	return false;
    }
}


str.__format__ = function()
{
    // TODO
}


str.__ge__ = function()
{
    // TODO
}


str.__getattribute__ = function()
{
    // TODO
}


str.__getitem__ = function(i)
{
    o = str_create();
	
    o.contents = $smake(1);
    o.contents = $ssub(this.contents, i.numerator, i.numerator);
    
    return o;
}


str.__getnewargs__ = function()
{
    // TODO
}


str.__gt__ = function()
{
    // TODO
}


str.__hash__ = function()
{
    o = functions.int(0);
	
    o.numerator = $hash(this.contents);
    
    return o;
}


str.__iter__ = function()
{
    var i = -1;

    var iterator = $new(null);
    iterator.contents = this.contents;

    iterator.__next__ = function()
    {
        i = i + 1;

        if (i > $ssize(this.contents))
        {
            ; // exception
        }
        else
        {
	    o = str_create();
			
	    o.contents = $smake(1);
	    o.contents = $ssub(this.contents, i, 1);
			
            return o;
        }
    }

    return iterator;
}


str.__le__ = function()
{
    // TODO
}


str.__len__ = function()
{
    o = functions.int(0);
	
    o.numerator =  $ssize(this.contents);
    
    return o;
}


str.__lt__ = function()
{
    // TODO
}


str.__mod__ = function()
{
    // TODO
}


str.__mul__ = function()
{
    // TODO
}


str.__ne__ = function(string)
{
    if (this.contents != string.contents)
    {
	return true;
    }
    else
    {
	return false;
    }
}


str.__repr__ = function()
{
    // TODO
}


str.__rmod__ = function()
{
    // TODO
}


str.__rmul__ = function()
{
    // TODO
}


str.__sizeof__ = function()
{
    // TODO
}


str.__str__ = function()
{
    // TODO
}

// arg[0] = sub, arg[1] = start, arg[2] = end
str.count = $varargs(function(args)
{
    var nb_args = $asize(args);
    var i = 0;
    
    var nb_found = 0;
    var str_size = $ssize(this.contents);
    
    if (nb_args == 1)
    {
	while (i < str_size)
	{
	    if ($ssub(this.contents, i, 1) == args[0].contents)
	    {
		nb_found = nb_found + 1;
	    }
	    i = i + 1;
	}
    }
    else if (nb_args == 2)
    {
	while (i < str_size)
	{
	    if (i >= args[1])
	    {
		if ($ssub(this.contents, i, 1) == args[0].contents)
		{
		    nb_found = nb_found + 1;
		}
		i = i + 1;
	    }
	}
    }
    else if (nb_args == 3)
    {
	while (i < str_size)
	{
	    if (i >= args[1] && i <= args[2])
	    {
		if ($ssub(this.contents, i, 1) == args[0].contents)
		{
		    nb_found = nb_found + 1;
		}
		i = i + 1;
	    }
	}
    }
    
    o = functions.int(0);
	
    o.numerator = nb_found;
    
    return o;
});


// arg[0] = sub, arg[1] = start, arg[2] = end
str.find = $varargs(function(args)
{
    var nb_args = $asize(args);
    var i = 0;
    
    var nb_found = 0;
    var str_size = $ssize(this.contents);
    
    if (nb_args == 1)
    {
	while (i < str_size)
	{
	    if ($ssub(this.contents, i, 1) == args[0].contents)
	    {
		nb_found = nb_found + 1;
	    }
	    i = i + 1;
	}
    }
    else if (nb_args == 2)
    {
	while (i < str_size)
	{
	    if (i >= args[1])
	    {
		if ($ssub(this.contents, i, 1) == args[0].contents)
		{
		    nb_found = nb_found + 1;
		}
		i = i + 1;
	    }
	}
    }
    else if (nb_args == 3)
    {
	while (i < str_size)
	{
	    if (i >= args[1] && i <= args[2])
	    {
		if ($ssub(this.contents, i, 1) == args[0].contents)
		{
		    nb_found = nb_found + 1;
		}
		i = i + 1;
	    }
	}
    }
    
    o = functions.int(0);
	
    o.numerator = nb_found;
    
    return o;
});


str.join = function(sequence)
{
    var sequence_size = $asize(sequence.contents);

    o = str_create();

    o.contents = $smake(sequence_size);

    var i = 0;

    while (i < sequence_size)
    {
	o.contents = o.contents + sequence.contents[i].contents;
		
	i = i + 1;
    }
	
    return o;
}


str.lower = function()
{
    var str_length = $ssize(this.contents);
    o = str_create();
    o.contents = $smake(str_length);

    var i = 0;
    var letter = $smake(1);

    while (i < str_length)
    {
	if ($sget(this.contents, i) >= 65 && $sget(this.contents, i) <= 90)
	{
	    $sset(letter, 0, $sget(this.contents, i) + 32);
	    o.contents = o.contents + letter;
	}
	else
	{
	    $sset(letter, 0, $sget(this.contents, i));
	    o.contents = o.contents + letter;
	}

	i = i + 1;
    }

    return o;
}


str.split = function()
{
    var str_length = $ssize(this.contents);
    var i = 0;
    var substr_start_position;

    l = functions.list();

    substr_start_position = 0;

    while (i < str_length)
    {

	// is it a space?
	if ($sget(this.contents, i) == 32)
	{
	    var substr_length = i - substr_start_position;
	    substr = str_create();
	    
	    substr.contents = $smake(substr_length);
	    $sblit(substr.contents, 0, this.contents, substr_start_position, substr_length);

	    l.append(substr);

	    substr_start_position = i;
	}

	i = i + 1;

    }

    // Getting the last part if any
    var substr_length = i - substr_start_position;
    substr = str_create();
    substr.contents = $smake(substr_length);
    $sblit(substr.contents, 0, this.contents, substr_start_position, substr_length);

    l.append(substr);

    return l;
}


str.strip = function()
{
    var str_length = $ssize(this.contents);
    o = str_create();
    o.contents = $smake(str_length);

    var i = 0;
    var letter = $smake(1);

    while (i < str_length)
    {
	if ($sget(this.contents, i) > 32 && $sget(this.contents, i) < 127)
	{
            $sset(letter, 0, $sget(this.contents, i));
            o.contents = o.contents + letter;
	}

	i = i + 1;
    }

    return o;
}


str.upper = function()
{
    var str_length = $ssize(this.contents);
    o = str_create();
    o.contents = $smake(str_length);

    var i = 0;
    var letter = $smake(1);

    while (i < str_length)
    {
	if ($sget(this.contents, i) >= 97 && $sget(this.contents, i) <= 122)
	{
	    $sset(letter, 0, $sget(this.contents, i) - 32);
            o.contents = o.contents + letter;
	}
	else
	{
	    $sset(letter, 0, $sget(this.contents, i));
	    o.contents = o.contents + letter;
	}

	i = i + 1;
    }

    return o;
}


$exports.str = str;
