var functions   = $loader.loadmodule("functions",$loader);

var tuple = $new(null);

var tuple_create = function()
{
    var o = $new(null);

    o.contents = $amake(0);
    o.type = 14;

    $objsetproto(o, tuple);

    return o;
}

tuple.__add__ = function(param_tuple)
{
    o = tuple_create();

    o.contents = $aconcat($array(this.contents, param_tuple.contents));
    
    return o;
}


tuple.__contains__ = function(item)
{
    var size = $asize(this.contents);
    var i = 0;
    
    while ( i < size )
    {
	if ( item.type == 11 || item.type == 12 )
	{
	    if ( this.contents[i].numerator == item.numerator )
	    {
		return true;
	    }
        }

        i = i + 1;
    }

    return false;
}


tuple.__eq__ = function(param_tuple)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_tuple.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return false;
    }
	
    while ( i < first_array_size )
    {
        if ( $hash($string(this.contents[i])) !=  $hash($string(param_tuple.contents[i])) )
        {
            return false;
        }

        i = i + 1;
    }

    return true;
}


tuple.__ge__ = function(param_tuple)
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] >= param_tuple.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


tuple.__getattribute__ = function()
{
    // TODO
}


tuple.__getitem__ = function(index)
{
    return this.contents[index.numerator];
}


tuple.__getnewargs__ = function()
{
    // TODO
}

tuple.__gt__ = function(param_tuple)
{
	var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] > param_tuple.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}

tuple.__hash__ = function()
{
    // TODO
}


tuple.__iter__ = function()
{
    var i = -1;

    var iterator = $new(null);
    iterator.contents = this.contents;

    iterator.__next__ = function()
    {
        i = i + 1;

        if (i >= $asize(this.contents))
        {
            ; // exception
        }
        else
        {
            return this.contents[i];
        }
    }

    return iterator;
}


tuple.__le__ = function()
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] <= param_tuple.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


tuple.__len__ = function()
{
    o = functions.int(0);
	
    o.numerator =  $asize(this.contents);
    
    return o;
}


tuple.__lt__ = function()
{
    var array_size = $asize(this.contents);
    var i = 0;
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] < param_tuple.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


tuple.__mul__ = function(n)
{
    o = tuple_create();
    var i = 0;
    var j = 0;
    
    var array_size = $asize(this.contents);
    var tmp_array = $amake($asize(this.contents) * n.numerator);
    var level = 0;
    
    while ( i < n.numerator )
    {
	while ( j < array_size)
	{
	    tmp_array[level+j] = this.contents[j];
	    j = j + 1;
	}
	level = level + array_size;
	j = 0;
		
	i = i + 1;
    }
    
    o.contents = tmp_array;
    return o;
}


tuple.__ne__ = function(param_tuple)
{
    var first_array_size = $asize(this.contents);
    var second_array_size = $asize(param_tuple.contents);

    var i = 0;

    if ( first_array_size != second_array_size )
    {
        return true;
    }
    
    while ( i < first_array_size )
    {
        if ( this.contents[i] != param_tuple.contents[i] )
        {
            return true;
        }

        i = i + 1;
    }

    return false;
}


tuple.__repr__ = function()
{
    // TODO
}


tuple.__rmul__ = function(n)
{
    o = tuple_create();
    var i = 0;
    var j = 0;
    
    var array_size = $asize(this.contents);
    var tmp_array = $amake($asize(this.contents) * n.numerator);
    var level = 0;
    
    while ( i < n.numerator )
    {
	while ( j < array_size)
	{
	    tmp_array[level+j] = this.contents[j];
	    j = j + 1;
	}
	level = level + array_size;
	j = 0;
		
	i = i + 1;
    }
    
    o.contents = tmp_array;
    return o;
}


tuple.__sizeof__ = function()
{
    // TODO
}


tuple.count = function(item)
{
    var i = 0;
    var total = 0;

    while (i < $asize(this.contents))
    {
        if ($hash($string(this.contents[i])) ==  $hash($string(item)))
        {
            total = total + 1;
        }

        i = i + 1;
    }

    o = functions.int(0);
    o.numerator = total;
    return o;
}


tuple.index = function(item)
{
    var i = 0;

    while (i < $asize(this.contents))
    {
        if ($hash($string(this.contents[i])) ==  $hash($string(item)))
        {
	    o = functions.int(0);
	    o.numerator = i
	    return o;
        }

        i = i + 1;
    }

    return null;
}


$exports.tuple = tuple;
