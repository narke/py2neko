var functions   = $loader.loadmodule("functions",$loader);
var bool        = $loader.loadmodule("bool",$loader);
var float       = $loader.loadmodule("float",$loader);

var int = $new(null);


var int_create = function()
{
    var o = $new(null);

    o.numerator = 0;
    o.denominator = 1;
    o.imag = 0;
    o.real = 0;
    o.type = 11;
    
    $objsetproto(o, int);
    
    return o;
}

int.__abs__ = function()
{
    o = int_create();

    o.numerator = this.numerator;

    if (this.numerator < 0)
    {
        o.numerator = 0 - this.numerator;
        return o;
    }

    return o;
}

int.__add__ = function(y)
{
    var o = int_create();

    o.numerator = this.numerator + y.numerator;

    return o;
}

int.__and__ = function(y)
{
    var o = int_create();
    
    o.numerator = this.numerator & y.numerator;
    
    return o;
}

int.__bool__ = function()
{
    return functions.bool(this.numerator);
}

int.__ceil__ = function()
{
    var o = int_create();

    o.numerator = this.numerator;

    return o;
}

int.__divmod__ = function(y)
{
    var a = int_create();
    var b = int_create();
	
    a.numerator = $idiv(this.numerator - this.numerator % y.numerator, y.numerator);
    b.numerator = this.numerator % y.numerator;
	
    // TODO create tuple
	
    //return (a, b);
}

int.__eq__ = function(y)
{
    return this.numerator == y.numerator;
}

int.__float__ = function()
{
    return functions.float(this.numerator);
}

int.__floor__ = function()
{
    var o = int_create();

    o.numerator = this.numerator;

    return o;
}

int.__floordiv__ = function(y)
{
    var o = int_create();

    o.numerator = (this.numerator / y.numerator) - ((this.numerator / y.numerator) % 1);

    return o;
}

int.__format__ = function()
{
    //TODO
}

int.__ge__ = function(y)
{
    return this.numerator >= y.numerator;
}

int.__getattribute__ = function()
{
    //TODO
}

int.__getnewargs__ = function()
{
    //TODO
}

int.__gt__ = function(y)
{
    return this.numerator > y.numerator;
}

int.__hash__ = function()
{
    // TODO return functions.hash(this.numerator);
}

int.__index__ = function()
{
    //TODO
}

int.__int__ = function(obj)
{
    o = int_create();

    if ( obj.type == 11 )
        o.numerator = obj.numerator;

    return o;
}

int.__invert__ = function()
{
    //TODO
}

int.__le__ = function(y)
{
    return this.numerator <= y.numerator;
}

int.__lshift__ = function()
{
    o = int_create();
	
    o.numerator = this.numerator << y.numerator;
	
    return o;
}

int.__lt__ = function(y)
{
    return this.numerator < y.numerator;
}

int.__mod__ = function(y)
{
    o = int_create();
    
    o.numerator = this.numerator % y.numerator;

    return o;
}

int.__mul__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator * y.numerator;

    return o;
}

int.__ne__ = function(y)
{
    return this.numerator != y.numerator;
}

int.__neg__ = function()
{
    o = int_create();

    o.numerator = 0 - this.numerator;

    return o;
}

int.__or__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator | y.numerator;
    
    return o;
}

int.__pos__ = function()
{
    o = int_create();
    
    o.numerator = 0 + this.numerator;
    
    return o;
}

int.__pow__ = function(y)
{
    i = int_create();
    i.numerator = 0;
	
    var result = this.numerator;

    while (i.numerator < y.numerator - 1)
    {
        result = result * this.numerator;
        i.numerator = i.numerator + 1;
    }
    
    return i;
}

int.__radd__ = function(y)
{
    o = int_create();
    
    o.numerator = y.numerator + this.numerator;
    
    return o;
}

int.__rand__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator & this.numerator;
    
    return o;
}

int.__rdivmod__ = function(y)
{
    var a = int_create();
    var b = int_create();
	
    a.numerator = this.numerator % y.numerator;
    b.numerator = $idiv(this.numerator - this.numerator % y.numerator, y.numerator);
	
    // TODO create tuple
	
    //return (a, b);
}

int.__repr__ = function()
{
    //TODO
}

int.__rfloordiv__ = function(y)
{
    o = int_create();
    
    o.numerator = (y.numerator / this.numerator) - ((y.numerator / this.numerator) % 1);
    
    return o;
}

int.__rlshift__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator << this.numerator;
    
    return o;
}

int.__rmod__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator % this.numerator;
    
    return o;
}

int.__rmul__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator * this.numerator;
    
    return o;
}

int.__ror__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator | this.numerator;
    
    return o;
}

int.__round__ = function()
{
    o = int_create();

    o.numerator = this.numerator;

    return o;
}

int.__rpow__ = function(y)
{
    // TODO
}

int.__rrshift__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator >> this.numerator;

    return o;
}

int.__rshift__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator >> y.numerator;
    
    return o;
}

int.__rsub__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator - this.numerator;
    
    return o;
}

int.__rtruediv__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator / this.numerator;
    
    return o;
}

int.__rxor__ = function(y)
{
    o = int_create();

    o.numerator = y.numerator ^ this.numerator;
    
    return o;
}

int.__sizeof__ = function()
{
    //TODO
}

int.__str__ = function(y)
{
    return functions.str(this.numerator);
}

int.__sub__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator - y.numerator;
    
    return o;
}

int.__truediv__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator / y.numerator;
    
    return o;
}

int.__trunc__ = function()
{
    o = int_create();

    o.numerator = this.numerator;

    return o;
}

int.__xor__ = function(y)
{
    o = int_create();

    o.numerator = this.numerator ^ y.numerator;
    
    return o;
}

int.bit_length = function()
{
    return int.bit_length(this.numerator);
}

int.conjugate = function()
{
    //TODO
}

$exports.int = int;
